{"version":3,"file":"filesize.min.js","sources":["../src/filesize.js"],"sourcesContent":["const symbol = {\n\t\tiec: {\n\t\t\tbits: [\"bit\", \"Kibit\", \"Mibit\", \"Gibit\", \"Tibit\", \"Pibit\", \"Eibit\", \"Zibit\", \"Yibit\"],\n\t\t\tbytes: [\"B\", \"KiB\", \"MiB\", \"GiB\", \"TiB\", \"PiB\", \"EiB\", \"ZiB\", \"YiB\"]\n\t\t},\n\t\tjedec: {\n\t\t\tbits: [\"bit\", \"Kbit\", \"Mbit\", \"Gbit\", \"Tbit\", \"Pbit\", \"Ebit\", \"Zbit\", \"Ybit\"],\n\t\t\tbytes: [\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\"]\n\t\t}\n\t},\n\tfullform = {\n\t\tiec: [\"\", \"kibi\", \"mebi\", \"gibi\", \"tebi\", \"pebi\", \"exbi\", \"zebi\", \"yobi\"],\n\t\tjedec: [\"\", \"kilo\", \"mega\", \"giga\", \"tera\", \"peta\", \"exa\", \"zetta\", \"yotta\"]\n\t},\n\troundingFuncs = {\n\t\tfloor: Math.floor,\n\t\tceil: Math.ceil\n\t};\n\n/**\n * filesize\n *\n * @method filesize\n * @param  {Mixed}   arg        String, Int or Float to transform\n * @param  {Object}  descriptor [Optional] Flags\n * @return {String}             Readable file size String\n */\nfunction filesize (arg, descriptor = {}) {\n\tlet result = [],\n\t\tval = 0,\n\t\te, base, bits, ceil, full, fullforms, locale, localeOptions, neg, num, output, pad, round, u, separator, spacer, standard, symbols, roundingFunc, precision;\n\n\tif (isNaN(arg)) {\n\t\tthrow new TypeError(\"Invalid number\");\n\t}\n\n\tbits = descriptor.bits === true;\n\tpad = descriptor.pad === true;\n\tbase = descriptor.base || 10;\n\tround = descriptor.round !== void 0 ? descriptor.round : 2;\n\tlocale = descriptor.locale !== void 0 ? descriptor.locale : \"\";\n\tlocaleOptions = descriptor.localeOptions || {};\n\tseparator = descriptor.separator !== void 0 ? descriptor.separator : \"\";\n\tspacer = descriptor.spacer !== void 0 ? descriptor.spacer : \" \";\n\tsymbols = descriptor.symbols || {};\n\tstandard = descriptor.standard in symbol ? descriptor.standard : \"iec\";\n\toutput = descriptor.output || \"string\";\n\tfull = descriptor.fullform === true;\n\tfullforms = descriptor.fullforms instanceof Array ? descriptor.fullforms : [];\n\te = descriptor.exponent !== void 0 ? descriptor.exponent : -1;\n\troundingFunc = roundingFuncs[descriptor.roundingMethod] || Math.round;\n\tnum = Number(arg);\n\tneg = num < 0;\n\tceil = base > 2 ? 1000 : 1024;\n\tprecision = isNaN(descriptor.precision) === false ? parseInt(descriptor.precision, 10) : 0;\n\n\t// Flipping a negative number to determine the size\n\tif (neg) {\n\t\tnum = -num;\n\t}\n\n\t// Determining the exponent\n\tif (e === -1 || isNaN(e)) {\n\t\te = Math.floor(Math.log(num) / Math.log(ceil));\n\n\t\tif (e < 0) {\n\t\t\te = 0;\n\t\t}\n\t}\n\n\t// Exceeding supported length, time to reduce & multiply\n\tif (e > 8) {\n\t\tif (precision > 0) {\n\t\t\tprecision += 8 - e;\n\t\t}\n\n\t\te = 8;\n\t}\n\n\tif (output === \"exponent\") {\n\t\treturn e;\n\t}\n\n\t// Zero is now a special case because bytes divide by 1\n\tif (num === 0) {\n\t\tresult[0] = 0;\n\t\tu = result[1] = symbol[standard][bits ? \"bits\" : \"bytes\"][e];\n\t} else {\n\t\tval = num / (base === 2 ? Math.pow(2, e * 10) : Math.pow(1000, e));\n\n\t\tif (bits) {\n\t\t\tval = val * 8;\n\n\t\t\tif (val >= ceil && e < 8) {\n\t\t\t\tval = val / ceil;\n\t\t\t\te++;\n\t\t\t}\n\t\t}\n\n\t\tconst p = Math.pow(10, e > 0 ? round : 0);\n\t\tresult[0] = roundingFunc(val * p) / p;\n\n\t\tif (result[0] === ceil && e < 8 && descriptor.exponent === void 0) {\n\t\t\tresult[0] = 1;\n\t\t\te++;\n\t\t}\n\n\t\tu = result[1] = symbol[standard][bits ? \"bits\" : \"bytes\"][e];\n\t}\n\n\t// Decorating a 'diff'\n\tif (neg) {\n\t\tresult[0] = -result[0];\n\t}\n\n\t// Setting optional precision\n\tif (precision > 0) {\n\t\tresult[0] = result[0].toPrecision(precision);\n\t}\n\n\t// Applying custom symbol\n\tresult[1] = symbols[result[1]] || result[1];\n\n\tif (locale === true) {\n\t\tresult[0] = result[0].toLocaleString();\n\t} else if (locale.length > 0) {\n\t\tresult[0] = result[0].toLocaleString(locale, localeOptions);\n\t} else if (separator.length > 0) {\n\t\tresult[0] = result[0].toString().replace(\".\", separator);\n\t}\n\n\tif (pad && Number.isInteger(result[0]) === false && round > 0) {\n\t\tconst x = separator || \".\",\n\t\t\ttmp = result[0].toString().split(x),\n\t\t\ts = tmp[1] || \"\",\n\t\t\tl = s.length,\n\t\t\tn = round - l;\n\n\t\tresult[0] = `${tmp[0]}${x}${s.padEnd(l + n, \"0\")}`;\n\t}\n\n\tif (full) {\n\t\tresult[1] = fullforms[e] ? fullforms[e] : fullform[standard][e] + (bits ? \"bit\" : \"byte\") + (result[0] === 1 ? \"\" : \"s\");\n\t}\n\n\t// Returning Array, Object, or String (default)\n\treturn output === \"array\" ? result : output === \"object\" ? {value: result[0], symbol: result[1], exponent: e, unit: u} : result.join(spacer);\n}\n\n// Partial application for functional programming\nfilesize.partial = opt => arg => filesize(arg, opt);\n\nexport default filesize;\n"],"names":["symbol","iec","bits","bytes","jedec","fullform","roundingFuncs","floor","Math","ceil","filesize","arg","e","base","full","fullforms","locale","localeOptions","neg","num","output","pad","round","u","separator","spacer","standard","symbols","roundingFunc","precision","descriptor","result","val","isNaN","TypeError","Array","exponent","roundingMethod","Number","parseInt","log","pow","p","toPrecision","toLocaleString","length","toString","replace","isInteger","x","tmp","split","s","l","n","concat","padEnd","value","unit","join","partial","opt"],"mappings":"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"}